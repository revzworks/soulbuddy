name: iOS CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      lane:
        description: 'Fastlane lane to run'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - beta
          - release

env:
  # Xcode version
  DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer
  
  # App configuration
  APP_BUNDLE_ID: com.revzworks.soulbuddy
  SCHEME: soulbuddy
  
  # Fastlane
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8

jobs:
  test:
    name: Run Tests
    runs-on: macos-14
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'
        
    - name: Cache Ruby dependencies
      uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-
          
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/org.swift.swiftpm/
          ~/.swiftpm/
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Install dependencies
      run: bundle install
      
    - name: Run tests
      env:
        SKIP_GIT_CHECK: true
      run: bundle exec fastlane test
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test_output/
          fastlane/test_output/
        retention-days: 7

  build-for-testing:
    name: Build for Testing
    runs-on: macos-14
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'
        
    - name: Cache Ruby dependencies
      uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-
          
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        
    - name: Install dependencies
      run: bundle install
      
    - name: Build for testing
      env:
        SKIP_GIT_CHECK: true
      run: bundle exec fastlane build_for_testing

  beta:
    name: Deploy to TestFlight
    runs-on: macos-14
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.lane == 'beta')
    environment: beta
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'
        
    - name: Cache Ruby dependencies
      uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-
          
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        
    - name: Install dependencies
      run: bundle install
      
    - name: Setup signing
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: bundle exec fastlane setup_ci
      
    - name: Create App Store Connect API Key
      env:
        APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
      run: |
        mkdir -p ~/.private_keys
        echo "$APP_STORE_CONNECT_API_KEY_KEY" | base64 -d > ~/.private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_KEY_ID.p8
        echo "APP_STORE_CONNECT_API_KEY_PATH=~/.private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_KEY_ID.p8" >> $GITHUB_ENV
        
    - name: Deploy to TestFlight
      env:
        SKIP_GIT_CHECK: true
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_STORE_CONNECT_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
        APP_STORE_CONNECT_API_KEY_PATH: ${{ env.APP_STORE_CONNECT_API_KEY_PATH }}
        SLACK_URL: ${{ secrets.SLACK_URL }}
      run: bundle exec fastlane beta
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: beta-build
        path: |
          build/
          fastlane/report.xml
        retention-days: 30

  release:
    name: Deploy to App Store
    runs-on: macos-14
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.lane == 'release'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'
        
    - name: Cache Ruby dependencies
      uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-
          
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        
    - name: Install dependencies
      run: bundle install
      
    - name: Setup Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
    - name: Setup signing
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: bundle exec fastlane setup_ci
      
    - name: Create App Store Connect API Key
      env:
        APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
      run: |
        mkdir -p ~/.private_keys
        echo "$APP_STORE_CONNECT_API_KEY_KEY" | base64 -d > ~/.private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_KEY_ID.p8
        echo "APP_STORE_CONNECT_API_KEY_PATH=~/.private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_KEY_ID.p8" >> $GITHUB_ENV
        
    - name: Deploy to App Store
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_STORE_CONNECT_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
        APP_STORE_CONNECT_API_KEY_PATH: ${{ env.APP_STORE_CONNECT_API_KEY_PATH }}
        SLACK_URL: ${{ secrets.SLACK_URL }}
      run: bundle exec fastlane release
      
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: release-build
        path: |
          build/
          fastlane/report.xml
        retention-days: 90 